// Package folderfort provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package folderfort

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	AccessTokenScopes = "accessToken.Scopes"
)

// Defines values for FileEntryType.
const (
	FileEntryTypeAudio  FileEntryType = "audio"
	FileEntryTypeFolder FileEntryType = "folder"
	FileEntryTypeImage  FileEntryType = "image"
	FileEntryTypePdf    FileEntryType = "pdf"
	FileEntryTypeText   FileEntryType = "text"
	FileEntryTypeVideo  FileEntryType = "video"
)

// Defines values for IndexEntryParamsType.
const (
	IndexEntryParamsTypeAudio  IndexEntryParamsType = "audio"
	IndexEntryParamsTypeFolder IndexEntryParamsType = "folder"
	IndexEntryParamsTypeImage  IndexEntryParamsType = "image"
	IndexEntryParamsTypePdf    IndexEntryParamsType = "pdf"
	IndexEntryParamsTypeText   IndexEntryParamsType = "text"
	IndexEntryParamsTypeVideo  IndexEntryParamsType = "video"
)

// Defines values for PutFileEntriesEntryIdChangePermissionsJSONBodyPermissions.
const (
	PutFileEntriesEntryIdChangePermissionsJSONBodyPermissionsDownload PutFileEntriesEntryIdChangePermissionsJSONBodyPermissions = "download"
	PutFileEntriesEntryIdChangePermissionsJSONBodyPermissionsEdit     PutFileEntriesEntryIdChangePermissionsJSONBodyPermissions = "edit"
	PutFileEntriesEntryIdChangePermissionsJSONBodyPermissionsView     PutFileEntriesEntryIdChangePermissionsJSONBodyPermissions = "view"
)

// Defines values for PostFileEntriesEntryIdShareJSONBodyPermissions.
const (
	PostFileEntriesEntryIdShareJSONBodyPermissionsDownload PostFileEntriesEntryIdShareJSONBodyPermissions = "download"
	PostFileEntriesEntryIdShareJSONBodyPermissionsEdit     PostFileEntriesEntryIdShareJSONBodyPermissions = "edit"
	PostFileEntriesEntryIdShareJSONBodyPermissionsView     PostFileEntriesEntryIdShareJSONBodyPermissions = "view"
)

// N422Response defines model for 422-Response.
type N422Response struct {
	Errors *struct {
		SomeData1 *string `json:"some_data_1,omitempty"`
		SomeData2 *string `json:"some_data_2,omitempty"`
	} `json:"errors,omitempty"`
	Message *string `json:"message,omitempty"`
	Status  *string `json:"status,omitempty"`
}

// FileEntry defines model for FileEntry.
type FileEntry struct {
	// CreatedAt date entry was uploaded
	CreatedAt *string `json:"created_at,omitempty"`

	// DeletedAt date entry was moved to trash (if it's in trash currently)
	DeletedAt   *string `json:"deleted_at,omitempty"`
	Description *string `json:"description,omitempty"`

	// FileName actual file name for this entry on storage
	FileName *string `json:"file_name,omitempty"`

	// FileSize In bytes
	FileSize *int64     `json:"file_size,omitempty"`
	Hash     *string    `json:"hash,omitempty"`
	Id       *int64     `json:"id,omitempty"`
	Mime     *string    `json:"mime,omitempty"`
	Name     *string    `json:"name,omitempty"`
	Parent   *FileEntry `json:"parent,omitempty"`

	// ParentId Parent folder ID
	ParentId *int64 `json:"parent_id,omitempty"`

	// Path full path of parent folder IDs for this entry up to root
	Path *string `json:"path,omitempty"`

	// Thumbnail Relative path to thumbnail image for the file (if it exists)
	Thumbnail *string        `json:"thumbnail,omitempty"`
	Type      *FileEntryType `json:"type,omitempty"`

	// UpdatedAt date entry was last modified (content, name or location changed)
	UpdatedAt *string `json:"updated_at,omitempty"`

	// Url relative url for previewing file or folder contents
	Url   *string `json:"url,omitempty"`
	Users *[]struct {
		Email *string `json:"email,omitempty"`
		Id    *int64  `json:"id,omitempty"`
	} `json:"users,omitempty"`
}

// FileEntryType defines model for FileEntry.Type.
type FileEntryType string

// ShareableLinkResponse defines model for Shareable-Link-Response.
type ShareableLinkResponse struct {
	Errors *struct {
		SomeData1 *string `json:"some_data_1,omitempty"`
		SomeData2 *string `json:"some_data_2,omitempty"`
	} `json:"errors,omitempty"`

	// FolderChildren If link is for folder, this will list immediate children of that folder
	FolderChildren *[]FileEntry   `json:"folderChildren,omitempty"`
	Link           *ShareableLink `json:"link,omitempty"`
	Status         *string        `json:"status,omitempty"`
}

// ShareableLink defines model for ShareableLink.
type ShareableLink struct {
	AllowDownload *bool      `json:"allow_download,omitempty"`
	AllowEdit     *bool      `json:"allow_edit,omitempty"`
	Entry         *FileEntry `json:"entry,omitempty"`

	// EntryId ID of file entry this link is attached to
	EntryId   *int64  `json:"entry_id,omitempty"`
	ExpiresAt *string `json:"expires_at,omitempty"`

	// Hash ID for link that will be visible in url
	Hash *string `json:"hash,omitempty"`
	Id   *int64  `json:"id,omitempty"`

	// Password Passwords are hashed, so this will not match the password that was entered in plain text
	Password *string `json:"password,omitempty"`

	// UserId ID of user that created this link
	UserId *int64 `json:"user_id,omitempty"`
}

// Tag defines model for Tag.
type Tag struct {
	Id   *int64  `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

// User defines model for User.
type User struct {
	// AccessToken Access token that can be used to authenticate API requests for this user
	AccessToken *string `json:"access_token,omitempty"`
	CreatedAt   *string `json:"created_at,omitempty"`
	DisplayName *string `json:"display_name,omitempty"`
	Email       *string `json:"email,omitempty"`
	FirstName   *string `json:"first_name,omitempty"`
	Id          *int64  `json:"id,omitempty"`
	LastName    *string `json:"last_name,omitempty"`
	UpdatedAt   *string `json:"updated_at,omitempty"`
}

// LoginJSONBody defines parameters for Login.
type LoginJSONBody struct {
	Email     *string `json:"email,omitempty"`
	Password  *string `json:"password,omitempty"`
	TokenName *string `json:"token_name,omitempty"`
}

// RegisterJSONBody defines parameters for Register.
type RegisterJSONBody struct {
	Email     *string `json:"email,omitempty"`
	Password  *string `json:"password,omitempty"`
	TokenName *string `json:"token_name,omitempty"`
}

// IndexEntryParams defines parameters for IndexEntry.
type IndexEntryParams struct {
	// PerPage How many entries to return per page
	PerPage *int64 `form:"perPage,omitempty" json:"perPage,omitempty"`

	// DeletedOnly Whether only trashed entries should be returned
	DeletedOnly *bool `form:"deletedOnly,omitempty" json:"deletedOnly,omitempty"`

	// StarredOnly Whether only starred entries should be returned
	StarredOnly *bool `form:"starredOnly,omitempty" json:"starredOnly,omitempty"`

	// RecentOnly Whether only recent entries should be returned
	RecentOnly *bool `form:"recentOnly,omitempty" json:"recentOnly,omitempty"`

	// SharedOnly Whether only entries that have been shared with you should be returned
	SharedOnly *bool `form:"sharedOnly,omitempty" json:"sharedOnly,omitempty"`

	// Query Search query entry names should be filtered on
	Query *string `form:"query,omitempty" json:"query,omitempty"`

	// Type File type entries should be filtered on
	Type *IndexEntryParamsType `form:"type,omitempty" json:"type,omitempty"`

	// ParentIds Only entries that are children of specified folders will be returned
	ParentIds *[]string `form:"parentIds,omitempty" json:"parentIds,omitempty"`

	// WorkspaceId Only return entries in specified workspace
	WorkspaceId *int `form:"workspaceId,omitempty" json:"workspaceId,omitempty"`
}

// IndexEntryParamsType defines parameters for IndexEntry.
type IndexEntryParamsType string

// EntriesDeleteJSONBody defines parameters for EntriesDelete.
type EntriesDeleteJSONBody struct {
	// DeleteForever Whether entries should be deleted permantently, instead of being moved to trash
	DeleteForever *string `json:"deleteForever,omitempty"`

	// EntryIds list of entry IDs to delete
	EntryIds *[]string `json:"entryIds,omitempty"`
}

// EntriesCopyJSONBody defines parameters for EntriesCopy.
type EntriesCopyJSONBody struct {
	// DestinationId ID of folder specified entries should be moved to
	DestinationId *int32 `json:"destinationId,omitempty"`

	// EntryIds List of entry ids
	EntryIds []int32 `json:"entryIds"`
}

// EntriesMoveJSONBody defines parameters for EntriesMove.
type EntriesMoveJSONBody struct {
	// DestinationId ID of folder specified entries should be moved to
	DestinationId *int32 `json:"destinationId,omitempty"`

	// EntryIds List of entry ids
	EntryIds []int32 `json:"entryIds"`
}

// EntriesRestoreJSONBody defines parameters for EntriesRestore.
type EntriesRestoreJSONBody struct {
	// EntryIds List of entry IDs
	EntryIds []int32 `json:"entryIds"`
}

// PostFileEntriesStarJSONBody defines parameters for PostFileEntriesStar.
type PostFileEntriesStarJSONBody struct {
	EntryIds *[]int `json:"entryIds,omitempty"`
}

// PostFileEntriesUnstarJSONBody defines parameters for PostFileEntriesUnstar.
type PostFileEntriesUnstarJSONBody struct {
	EntryIds *[]int `json:"entryIds,omitempty"`
}

// EntryUpdateJSONBody defines parameters for EntryUpdate.
type EntryUpdateJSONBody struct {
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// PutFileEntriesEntryIdChangePermissionsJSONBody defines parameters for PutFileEntriesEntryIdChangePermissions.
type PutFileEntriesEntryIdChangePermissionsJSONBody struct {
	Permissions *[]PutFileEntriesEntryIdChangePermissionsJSONBodyPermissions `json:"permissions,omitempty"`
	UserId      *int                                                         `json:"userId,omitempty"`
}

// PutFileEntriesEntryIdChangePermissionsJSONBodyPermissions defines parameters for PutFileEntriesEntryIdChangePermissions.
type PutFileEntriesEntryIdChangePermissionsJSONBodyPermissions string

// PostFileEntriesEntryIdShareJSONBody defines parameters for PostFileEntriesEntryIdShare.
type PostFileEntriesEntryIdShareJSONBody struct {
	Emails      *[]string                                         `json:"emails,omitempty"`
	Permissions *[]PostFileEntriesEntryIdShareJSONBodyPermissions `json:"permissions,omitempty"`
}

// PostFileEntriesEntryIdShareJSONBodyPermissions defines parameters for PostFileEntriesEntryIdShare.
type PostFileEntriesEntryIdShareJSONBodyPermissions string

// CreateShareableLinkJSONBody defines parameters for CreateShareableLink.
type CreateShareableLinkJSONBody struct {
	AllowDownload *bool `json:"allow_download,omitempty"`
	AllowEdit     *bool `json:"allow_edit,omitempty"`

	// ExpiresAt 2021-03-06T17:34:00.000000Z
	ExpiresAt *string `json:"expires_at,omitempty"`
	Password  *string `json:"password,omitempty"`
}

// DeleteFileEntriesEntryIdUnshareJSONBody defines parameters for DeleteFileEntriesEntryIdUnshare.
type DeleteFileEntriesEntryIdUnshareJSONBody struct {
	UserId *int `json:"userId,omitempty"`
}

// UpdateShareableLinkJSONBody defines parameters for UpdateShareableLink.
type UpdateShareableLinkJSONBody struct {
	AllowDownload *bool `json:"allow_download,omitempty"`
	AllowEdit     *bool `json:"allow_edit,omitempty"`

	// ExpiresAt 2021-03-06T17:34:00.000000Z
	ExpiresAt *string `json:"expires_at,omitempty"`
	Password  *string `json:"password,omitempty"`
}

// CreateFolderJSONBody defines parameters for CreateFolder.
type CreateFolderJSONBody struct {
	Name *string `json:"name,omitempty"`

	// ParentId ID of parent folder or null if it should be created at root
	ParentId *int `json:"parentId,omitempty"`
}

// UploadMultipartBody defines parameters for Upload.
type UploadMultipartBody struct {
	// File Content of file to upload to SITE_NAME
	File *openapi_types.File `json:"file,omitempty"`

	// ParentId ID of folder where this file should be uploaded, `null` will upload to root
	ParentId *int `json:"parentId,omitempty"`

	// RelativePath Folders in the path provided here will be auto created, if they don't exist already. This is mainly useful when uploading a folder from browser. It should include original filename as well: <br> `/some/folders/here/file-name.jpg`
	RelativePath *string `json:"relativePath,omitempty"`
}

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody LoginJSONBody

// RegisterJSONRequestBody defines body for Register for application/json ContentType.
type RegisterJSONRequestBody RegisterJSONBody

// EntriesDeleteJSONRequestBody defines body for EntriesDelete for application/json ContentType.
type EntriesDeleteJSONRequestBody EntriesDeleteJSONBody

// EntriesCopyJSONRequestBody defines body for EntriesCopy for application/json ContentType.
type EntriesCopyJSONRequestBody EntriesCopyJSONBody

// EntriesMoveJSONRequestBody defines body for EntriesMove for application/json ContentType.
type EntriesMoveJSONRequestBody EntriesMoveJSONBody

// EntriesRestoreJSONRequestBody defines body for EntriesRestore for application/json ContentType.
type EntriesRestoreJSONRequestBody EntriesRestoreJSONBody

// PostFileEntriesStarJSONRequestBody defines body for PostFileEntriesStar for application/json ContentType.
type PostFileEntriesStarJSONRequestBody PostFileEntriesStarJSONBody

// PostFileEntriesUnstarJSONRequestBody defines body for PostFileEntriesUnstar for application/json ContentType.
type PostFileEntriesUnstarJSONRequestBody PostFileEntriesUnstarJSONBody

// EntryUpdateJSONRequestBody defines body for EntryUpdate for application/json ContentType.
type EntryUpdateJSONRequestBody EntryUpdateJSONBody

// PutFileEntriesEntryIdChangePermissionsJSONRequestBody defines body for PutFileEntriesEntryIdChangePermissions for application/json ContentType.
type PutFileEntriesEntryIdChangePermissionsJSONRequestBody PutFileEntriesEntryIdChangePermissionsJSONBody

// PostFileEntriesEntryIdShareJSONRequestBody defines body for PostFileEntriesEntryIdShare for application/json ContentType.
type PostFileEntriesEntryIdShareJSONRequestBody PostFileEntriesEntryIdShareJSONBody

// CreateShareableLinkJSONRequestBody defines body for CreateShareableLink for application/json ContentType.
type CreateShareableLinkJSONRequestBody CreateShareableLinkJSONBody

// DeleteFileEntriesEntryIdUnshareJSONRequestBody defines body for DeleteFileEntriesEntryIdUnshare for application/json ContentType.
type DeleteFileEntriesEntryIdUnshareJSONRequestBody DeleteFileEntriesEntryIdUnshareJSONBody

// UpdateShareableLinkJSONRequestBody defines body for UpdateShareableLink for application/json ContentType.
type UpdateShareableLinkJSONRequestBody UpdateShareableLinkJSONBody

// CreateFolderJSONRequestBody defines body for CreateFolder for application/json ContentType.
type CreateFolderJSONRequestBody CreateFolderJSONBody

// UploadMultipartRequestBody defines body for Upload for multipart/form-data ContentType.
type UploadMultipartRequestBody UploadMultipartBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// LoginWithBody request with any body
	LoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Login(ctx context.Context, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RegisterWithBody request with any body
	RegisterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Register(ctx context.Context, body RegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IndexEntry request
	IndexEntry(ctx context.Context, params *IndexEntryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EntriesDeleteWithBody request with any body
	EntriesDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EntriesDelete(ctx context.Context, body EntriesDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EntriesCopyWithBody request with any body
	EntriesCopyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EntriesCopy(ctx context.Context, body EntriesCopyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EntriesMoveWithBody request with any body
	EntriesMoveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EntriesMove(ctx context.Context, body EntriesMoveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EntriesRestoreWithBody request with any body
	EntriesRestoreWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EntriesRestore(ctx context.Context, body EntriesRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFileEntriesStarWithBody request with any body
	PostFileEntriesStarWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFileEntriesStar(ctx context.Context, body PostFileEntriesStarJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFileEntriesUnstarWithBody request with any body
	PostFileEntriesUnstarWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFileEntriesUnstar(ctx context.Context, body PostFileEntriesUnstarJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EntryUpdateWithBody request with any body
	EntryUpdateWithBody(ctx context.Context, entryId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EntryUpdate(ctx context.Context, entryId int, body EntryUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutFileEntriesEntryIdChangePermissionsWithBody request with any body
	PutFileEntriesEntryIdChangePermissionsWithBody(ctx context.Context, entryId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutFileEntriesEntryIdChangePermissions(ctx context.Context, entryId int, body PutFileEntriesEntryIdChangePermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFileEntriesEntryIdShareWithBody request with any body
	PostFileEntriesEntryIdShareWithBody(ctx context.Context, entryId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFileEntriesEntryIdShare(ctx context.Context, entryId int, body PostFileEntriesEntryIdShareJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetShareableLink request
	GetShareableLink(ctx context.Context, entryId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateShareableLinkWithBody request with any body
	CreateShareableLinkWithBody(ctx context.Context, entryId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateShareableLink(ctx context.Context, entryId int64, body CreateShareableLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFileEntriesEntryIdUnshareWithBody request with any body
	DeleteFileEntriesEntryIdUnshareWithBody(ctx context.Context, entryId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteFileEntriesEntryIdUnshare(ctx context.Context, entryId int, body DeleteFileEntriesEntryIdUnshareJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteShareableLink request
	DeleteShareableLink(ctx context.Context, entryId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateShareableLinkWithBody request with any body
	UpdateShareableLinkWithBody(ctx context.Context, entryId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateShareableLink(ctx context.Context, entryId int64, body UpdateShareableLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateFolderWithBody request with any body
	CreateFolderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateFolder(ctx context.Context, body CreateFolderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UploadWithBody request with any body
	UploadWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) LoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Login(ctx context.Context, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Register(ctx context.Context, body RegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IndexEntry(ctx context.Context, params *IndexEntryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIndexEntryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EntriesDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEntriesDeleteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EntriesDelete(ctx context.Context, body EntriesDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEntriesDeleteRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EntriesCopyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEntriesCopyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EntriesCopy(ctx context.Context, body EntriesCopyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEntriesCopyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EntriesMoveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEntriesMoveRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EntriesMove(ctx context.Context, body EntriesMoveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEntriesMoveRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EntriesRestoreWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEntriesRestoreRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EntriesRestore(ctx context.Context, body EntriesRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEntriesRestoreRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFileEntriesStarWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFileEntriesStarRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFileEntriesStar(ctx context.Context, body PostFileEntriesStarJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFileEntriesStarRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFileEntriesUnstarWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFileEntriesUnstarRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFileEntriesUnstar(ctx context.Context, body PostFileEntriesUnstarJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFileEntriesUnstarRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EntryUpdateWithBody(ctx context.Context, entryId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEntryUpdateRequestWithBody(c.Server, entryId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EntryUpdate(ctx context.Context, entryId int, body EntryUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEntryUpdateRequest(c.Server, entryId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutFileEntriesEntryIdChangePermissionsWithBody(ctx context.Context, entryId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutFileEntriesEntryIdChangePermissionsRequestWithBody(c.Server, entryId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutFileEntriesEntryIdChangePermissions(ctx context.Context, entryId int, body PutFileEntriesEntryIdChangePermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutFileEntriesEntryIdChangePermissionsRequest(c.Server, entryId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFileEntriesEntryIdShareWithBody(ctx context.Context, entryId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFileEntriesEntryIdShareRequestWithBody(c.Server, entryId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFileEntriesEntryIdShare(ctx context.Context, entryId int, body PostFileEntriesEntryIdShareJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFileEntriesEntryIdShareRequest(c.Server, entryId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetShareableLink(ctx context.Context, entryId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetShareableLinkRequest(c.Server, entryId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateShareableLinkWithBody(ctx context.Context, entryId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateShareableLinkRequestWithBody(c.Server, entryId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateShareableLink(ctx context.Context, entryId int64, body CreateShareableLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateShareableLinkRequest(c.Server, entryId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFileEntriesEntryIdUnshareWithBody(ctx context.Context, entryId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFileEntriesEntryIdUnshareRequestWithBody(c.Server, entryId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFileEntriesEntryIdUnshare(ctx context.Context, entryId int, body DeleteFileEntriesEntryIdUnshareJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFileEntriesEntryIdUnshareRequest(c.Server, entryId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteShareableLink(ctx context.Context, entryId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteShareableLinkRequest(c.Server, entryId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateShareableLinkWithBody(ctx context.Context, entryId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateShareableLinkRequestWithBody(c.Server, entryId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateShareableLink(ctx context.Context, entryId int64, body UpdateShareableLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateShareableLinkRequest(c.Server, entryId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFolderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFolderRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFolder(ctx context.Context, body CreateFolderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFolderRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UploadWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUploadRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewLoginRequest calls the generic Login builder with application/json body
func NewLoginRequest(server string, body LoginJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLoginRequestWithBody(server, "application/json", bodyReader)
}

// NewLoginRequestWithBody generates requests for Login with any type of body
func NewLoginRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRegisterRequest calls the generic Register builder with application/json body
func NewRegisterRequest(server string, body RegisterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRegisterRequestWithBody(server, "application/json", bodyReader)
}

// NewRegisterRequestWithBody generates requests for Register with any type of body
func NewRegisterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/register")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewIndexEntryRequest generates requests for IndexEntry
func NewIndexEntryRequest(server string, params *IndexEntryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/drive/file-entries")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "perPage", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedOnly != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deletedOnly", runtime.ParamLocationQuery, *params.DeletedOnly); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StarredOnly != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "starredOnly", runtime.ParamLocationQuery, *params.StarredOnly); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RecentOnly != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "recentOnly", runtime.ParamLocationQuery, *params.RecentOnly); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SharedOnly != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sharedOnly", runtime.ParamLocationQuery, *params.SharedOnly); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Query != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, *params.Query); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "parentIds", runtime.ParamLocationQuery, *params.ParentIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WorkspaceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "workspaceId", runtime.ParamLocationQuery, *params.WorkspaceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEntriesDeleteRequest calls the generic EntriesDelete builder with application/json body
func NewEntriesDeleteRequest(server string, body EntriesDeleteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEntriesDeleteRequestWithBody(server, "application/json", bodyReader)
}

// NewEntriesDeleteRequestWithBody generates requests for EntriesDelete with any type of body
func NewEntriesDeleteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/file-entries")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEntriesCopyRequest calls the generic EntriesCopy builder with application/json body
func NewEntriesCopyRequest(server string, body EntriesCopyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEntriesCopyRequestWithBody(server, "application/json", bodyReader)
}

// NewEntriesCopyRequestWithBody generates requests for EntriesCopy with any type of body
func NewEntriesCopyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/file-entries/duplicate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEntriesMoveRequest calls the generic EntriesMove builder with application/json body
func NewEntriesMoveRequest(server string, body EntriesMoveJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEntriesMoveRequestWithBody(server, "application/json", bodyReader)
}

// NewEntriesMoveRequestWithBody generates requests for EntriesMove with any type of body
func NewEntriesMoveRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/file-entries/move")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEntriesRestoreRequest calls the generic EntriesRestore builder with application/json body
func NewEntriesRestoreRequest(server string, body EntriesRestoreJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEntriesRestoreRequestWithBody(server, "application/json", bodyReader)
}

// NewEntriesRestoreRequestWithBody generates requests for EntriesRestore with any type of body
func NewEntriesRestoreRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/file-entries/restore")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostFileEntriesStarRequest calls the generic PostFileEntriesStar builder with application/json body
func NewPostFileEntriesStarRequest(server string, body PostFileEntriesStarJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFileEntriesStarRequestWithBody(server, "application/json", bodyReader)
}

// NewPostFileEntriesStarRequestWithBody generates requests for PostFileEntriesStar with any type of body
func NewPostFileEntriesStarRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/file-entries/star")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostFileEntriesUnstarRequest calls the generic PostFileEntriesUnstar builder with application/json body
func NewPostFileEntriesUnstarRequest(server string, body PostFileEntriesUnstarJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFileEntriesUnstarRequestWithBody(server, "application/json", bodyReader)
}

// NewPostFileEntriesUnstarRequestWithBody generates requests for PostFileEntriesUnstar with any type of body
func NewPostFileEntriesUnstarRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/file-entries/unstar")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEntryUpdateRequest calls the generic EntryUpdate builder with application/json body
func NewEntryUpdateRequest(server string, entryId int, body EntryUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEntryUpdateRequestWithBody(server, entryId, "application/json", bodyReader)
}

// NewEntryUpdateRequestWithBody generates requests for EntryUpdate with any type of body
func NewEntryUpdateRequestWithBody(server string, entryId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "entryId", runtime.ParamLocationPath, entryId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/file-entries/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutFileEntriesEntryIdChangePermissionsRequest calls the generic PutFileEntriesEntryIdChangePermissions builder with application/json body
func NewPutFileEntriesEntryIdChangePermissionsRequest(server string, entryId int, body PutFileEntriesEntryIdChangePermissionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutFileEntriesEntryIdChangePermissionsRequestWithBody(server, entryId, "application/json", bodyReader)
}

// NewPutFileEntriesEntryIdChangePermissionsRequestWithBody generates requests for PutFileEntriesEntryIdChangePermissions with any type of body
func NewPutFileEntriesEntryIdChangePermissionsRequestWithBody(server string, entryId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "entryId", runtime.ParamLocationPath, entryId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/file-entries/%s/change-permissions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostFileEntriesEntryIdShareRequest calls the generic PostFileEntriesEntryIdShare builder with application/json body
func NewPostFileEntriesEntryIdShareRequest(server string, entryId int, body PostFileEntriesEntryIdShareJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFileEntriesEntryIdShareRequestWithBody(server, entryId, "application/json", bodyReader)
}

// NewPostFileEntriesEntryIdShareRequestWithBody generates requests for PostFileEntriesEntryIdShare with any type of body
func NewPostFileEntriesEntryIdShareRequestWithBody(server string, entryId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "entryId", runtime.ParamLocationPath, entryId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/file-entries/%s/share", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetShareableLinkRequest generates requests for GetShareableLink
func NewGetShareableLinkRequest(server string, entryId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "entryId", runtime.ParamLocationPath, entryId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/file-entries/%s/shareable-link", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateShareableLinkRequest calls the generic CreateShareableLink builder with application/json body
func NewCreateShareableLinkRequest(server string, entryId int64, body CreateShareableLinkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateShareableLinkRequestWithBody(server, entryId, "application/json", bodyReader)
}

// NewCreateShareableLinkRequestWithBody generates requests for CreateShareableLink with any type of body
func NewCreateShareableLinkRequestWithBody(server string, entryId int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "entryId", runtime.ParamLocationPath, entryId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/file-entries/%s/shareable-link", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteFileEntriesEntryIdUnshareRequest calls the generic DeleteFileEntriesEntryIdUnshare builder with application/json body
func NewDeleteFileEntriesEntryIdUnshareRequest(server string, entryId int, body DeleteFileEntriesEntryIdUnshareJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteFileEntriesEntryIdUnshareRequestWithBody(server, entryId, "application/json", bodyReader)
}

// NewDeleteFileEntriesEntryIdUnshareRequestWithBody generates requests for DeleteFileEntriesEntryIdUnshare with any type of body
func NewDeleteFileEntriesEntryIdUnshareRequestWithBody(server string, entryId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "entryId", runtime.ParamLocationPath, entryId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/file-entries/%s/unshare", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteShareableLinkRequest generates requests for DeleteShareableLink
func NewDeleteShareableLinkRequest(server string, entryId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "entryId", runtime.ParamLocationPath, entryId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/file_entries/%s/shareable-link", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateShareableLinkRequest calls the generic UpdateShareableLink builder with application/json body
func NewUpdateShareableLinkRequest(server string, entryId int64, body UpdateShareableLinkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateShareableLinkRequestWithBody(server, entryId, "application/json", bodyReader)
}

// NewUpdateShareableLinkRequestWithBody generates requests for UpdateShareableLink with any type of body
func NewUpdateShareableLinkRequestWithBody(server string, entryId int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "entryId", runtime.ParamLocationPath, entryId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/file_entries/%s/shareable-link", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateFolderRequest calls the generic CreateFolder builder with application/json body
func NewCreateFolderRequest(server string, body CreateFolderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateFolderRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateFolderRequestWithBody generates requests for CreateFolder with any type of body
func NewCreateFolderRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/folders")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUploadRequestWithBody generates requests for Upload with any type of body
func NewUploadRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uploads")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// LoginWithBodyWithResponse request with any body
	LoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LoginResponse, error)

	LoginWithResponse(ctx context.Context, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*LoginResponse, error)

	// RegisterWithBodyWithResponse request with any body
	RegisterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterResponse, error)

	RegisterWithResponse(ctx context.Context, body RegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*RegisterResponse, error)

	// IndexEntryWithResponse request
	IndexEntryWithResponse(ctx context.Context, params *IndexEntryParams, reqEditors ...RequestEditorFn) (*IndexEntryResponse, error)

	// EntriesDeleteWithBodyWithResponse request with any body
	EntriesDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EntriesDeleteResponse, error)

	EntriesDeleteWithResponse(ctx context.Context, body EntriesDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*EntriesDeleteResponse, error)

	// EntriesCopyWithBodyWithResponse request with any body
	EntriesCopyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EntriesCopyResponse, error)

	EntriesCopyWithResponse(ctx context.Context, body EntriesCopyJSONRequestBody, reqEditors ...RequestEditorFn) (*EntriesCopyResponse, error)

	// EntriesMoveWithBodyWithResponse request with any body
	EntriesMoveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EntriesMoveResponse, error)

	EntriesMoveWithResponse(ctx context.Context, body EntriesMoveJSONRequestBody, reqEditors ...RequestEditorFn) (*EntriesMoveResponse, error)

	// EntriesRestoreWithBodyWithResponse request with any body
	EntriesRestoreWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EntriesRestoreResponse, error)

	EntriesRestoreWithResponse(ctx context.Context, body EntriesRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*EntriesRestoreResponse, error)

	// PostFileEntriesStarWithBodyWithResponse request with any body
	PostFileEntriesStarWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFileEntriesStarResponse, error)

	PostFileEntriesStarWithResponse(ctx context.Context, body PostFileEntriesStarJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFileEntriesStarResponse, error)

	// PostFileEntriesUnstarWithBodyWithResponse request with any body
	PostFileEntriesUnstarWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFileEntriesUnstarResponse, error)

	PostFileEntriesUnstarWithResponse(ctx context.Context, body PostFileEntriesUnstarJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFileEntriesUnstarResponse, error)

	// EntryUpdateWithBodyWithResponse request with any body
	EntryUpdateWithBodyWithResponse(ctx context.Context, entryId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EntryUpdateResponse, error)

	EntryUpdateWithResponse(ctx context.Context, entryId int, body EntryUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*EntryUpdateResponse, error)

	// PutFileEntriesEntryIdChangePermissionsWithBodyWithResponse request with any body
	PutFileEntriesEntryIdChangePermissionsWithBodyWithResponse(ctx context.Context, entryId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutFileEntriesEntryIdChangePermissionsResponse, error)

	PutFileEntriesEntryIdChangePermissionsWithResponse(ctx context.Context, entryId int, body PutFileEntriesEntryIdChangePermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutFileEntriesEntryIdChangePermissionsResponse, error)

	// PostFileEntriesEntryIdShareWithBodyWithResponse request with any body
	PostFileEntriesEntryIdShareWithBodyWithResponse(ctx context.Context, entryId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFileEntriesEntryIdShareResponse, error)

	PostFileEntriesEntryIdShareWithResponse(ctx context.Context, entryId int, body PostFileEntriesEntryIdShareJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFileEntriesEntryIdShareResponse, error)

	// GetShareableLinkWithResponse request
	GetShareableLinkWithResponse(ctx context.Context, entryId int64, reqEditors ...RequestEditorFn) (*GetShareableLinkResponse, error)

	// CreateShareableLinkWithBodyWithResponse request with any body
	CreateShareableLinkWithBodyWithResponse(ctx context.Context, entryId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateShareableLinkResponse, error)

	CreateShareableLinkWithResponse(ctx context.Context, entryId int64, body CreateShareableLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateShareableLinkResponse, error)

	// DeleteFileEntriesEntryIdUnshareWithBodyWithResponse request with any body
	DeleteFileEntriesEntryIdUnshareWithBodyWithResponse(ctx context.Context, entryId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteFileEntriesEntryIdUnshareResponse, error)

	DeleteFileEntriesEntryIdUnshareWithResponse(ctx context.Context, entryId int, body DeleteFileEntriesEntryIdUnshareJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteFileEntriesEntryIdUnshareResponse, error)

	// DeleteShareableLinkWithResponse request
	DeleteShareableLinkWithResponse(ctx context.Context, entryId int64, reqEditors ...RequestEditorFn) (*DeleteShareableLinkResponse, error)

	// UpdateShareableLinkWithBodyWithResponse request with any body
	UpdateShareableLinkWithBodyWithResponse(ctx context.Context, entryId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateShareableLinkResponse, error)

	UpdateShareableLinkWithResponse(ctx context.Context, entryId int64, body UpdateShareableLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateShareableLinkResponse, error)

	// CreateFolderWithBodyWithResponse request with any body
	CreateFolderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFolderResponse, error)

	CreateFolderWithResponse(ctx context.Context, body CreateFolderJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFolderResponse, error)

	// UploadWithBodyWithResponse request with any body
	UploadWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadResponse, error)
}

type LoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Status *string `json:"status,omitempty"`
		User   *User   `json:"user,omitempty"`
	}
	JSON422 *N422Response
}

// Status returns HTTPResponse.Status
func (r LoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RegisterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Status *string `json:"status,omitempty"`
		User   *User   `json:"user,omitempty"`
	}
	JSON422 *N422Response
}

// Status returns HTTPResponse.Status
func (r RegisterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegisterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IndexEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]FileEntry
}

// Status returns HTTPResponse.Status
func (r IndexEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IndexEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EntriesDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Status *string `json:"status,omitempty"`
	}
	JSON422 *N422Response
}

// Status returns HTTPResponse.Status
func (r EntriesDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EntriesDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EntriesCopyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Entries *[]FileEntry `json:"entries,omitempty"`
		Status  *string      `json:"status,omitempty"`
	}
	JSON422 *N422Response
}

// Status returns HTTPResponse.Status
func (r EntriesCopyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EntriesCopyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EntriesMoveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Entries *[]FileEntry `json:"entries,omitempty"`
		Status  *string      `json:"status,omitempty"`
	}
	JSON422 *N422Response
}

// Status returns HTTPResponse.Status
func (r EntriesMoveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EntriesMoveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EntriesRestoreResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Status *string `json:"status,omitempty"`
	}
	JSON422 *N422Response
}

// Status returns HTTPResponse.Status
func (r EntriesRestoreResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EntriesRestoreResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFileEntriesStarResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Status *string `json:"status,omitempty"`
		Tag    *Tag    `json:"tag,omitempty"`
	}
	JSON422 *N422Response
}

// Status returns HTTPResponse.Status
func (r PostFileEntriesStarResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFileEntriesStarResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFileEntriesUnstarResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Status *string `json:"status,omitempty"`
		Tag    *Tag    `json:"tag,omitempty"`
	}
	JSON422 *N422Response
}

// Status returns HTTPResponse.Status
func (r PostFileEntriesUnstarResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFileEntriesUnstarResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EntryUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		FileEntry *FileEntry `json:"fileEntry,omitempty"`
		Status    *string    `json:"status,omitempty"`
	}
	JSON422 *N422Response
}

// Status returns HTTPResponse.Status
func (r EntryUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EntryUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutFileEntriesEntryIdChangePermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Status *string `json:"status,omitempty"`
		Users  *[]User `json:"users,omitempty"`
	}
	JSON422 *N422Response
}

// Status returns HTTPResponse.Status
func (r PutFileEntriesEntryIdChangePermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutFileEntriesEntryIdChangePermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFileEntriesEntryIdShareResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Status *string `json:"status,omitempty"`
		Users  *[]User `json:"users,omitempty"`
	}
	JSON422 *N422Response
}

// Status returns HTTPResponse.Status
func (r PostFileEntriesEntryIdShareResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFileEntriesEntryIdShareResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetShareableLinkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShareableLinkResponse
	JSON422      *N422Response
}

// Status returns HTTPResponse.Status
func (r GetShareableLinkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetShareableLinkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateShareableLinkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Link   *ShareableLink `json:"link,omitempty"`
		Status *string        `json:"status,omitempty"`
	}
	JSON422 *N422Response
}

// Status returns HTTPResponse.Status
func (r CreateShareableLinkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateShareableLinkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFileEntriesEntryIdUnshareResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Status *string `json:"status,omitempty"`
		Users  *[]User `json:"users,omitempty"`
	}
	JSON422 *N422Response
}

// Status returns HTTPResponse.Status
func (r DeleteFileEntriesEntryIdUnshareResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFileEntriesEntryIdUnshareResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteShareableLinkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Status *string `json:"status,omitempty"`
	}
	JSON422 *N422Response
}

// Status returns HTTPResponse.Status
func (r DeleteShareableLinkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteShareableLinkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateShareableLinkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Link   *ShareableLink `json:"link,omitempty"`
		Status *string        `json:"status,omitempty"`
	}
	JSON422 *N422Response
}

// Status returns HTTPResponse.Status
func (r UpdateShareableLinkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateShareableLinkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateFolderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Folder *FileEntry `json:"folder,omitempty"`
		Status *string    `json:"status,omitempty"`
	}
	JSON422 *N422Response
}

// Status returns HTTPResponse.Status
func (r CreateFolderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateFolderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UploadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		FileEntry *FileEntry `json:"fileEntry,omitempty"`
		Status    *string    `json:"status,omitempty"`
	}
	JSON422 *N422Response
}

// Status returns HTTPResponse.Status
func (r UploadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UploadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// LoginWithBodyWithResponse request with arbitrary body returning *LoginResponse
func (c *ClientWithResponses) LoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LoginResponse, error) {
	rsp, err := c.LoginWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginResponse(rsp)
}

func (c *ClientWithResponses) LoginWithResponse(ctx context.Context, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*LoginResponse, error) {
	rsp, err := c.Login(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginResponse(rsp)
}

// RegisterWithBodyWithResponse request with arbitrary body returning *RegisterResponse
func (c *ClientWithResponses) RegisterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterResponse, error) {
	rsp, err := c.RegisterWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterResponse(rsp)
}

func (c *ClientWithResponses) RegisterWithResponse(ctx context.Context, body RegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*RegisterResponse, error) {
	rsp, err := c.Register(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterResponse(rsp)
}

// IndexEntryWithResponse request returning *IndexEntryResponse
func (c *ClientWithResponses) IndexEntryWithResponse(ctx context.Context, params *IndexEntryParams, reqEditors ...RequestEditorFn) (*IndexEntryResponse, error) {
	rsp, err := c.IndexEntry(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIndexEntryResponse(rsp)
}

// EntriesDeleteWithBodyWithResponse request with arbitrary body returning *EntriesDeleteResponse
func (c *ClientWithResponses) EntriesDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EntriesDeleteResponse, error) {
	rsp, err := c.EntriesDeleteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEntriesDeleteResponse(rsp)
}

func (c *ClientWithResponses) EntriesDeleteWithResponse(ctx context.Context, body EntriesDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*EntriesDeleteResponse, error) {
	rsp, err := c.EntriesDelete(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEntriesDeleteResponse(rsp)
}

// EntriesCopyWithBodyWithResponse request with arbitrary body returning *EntriesCopyResponse
func (c *ClientWithResponses) EntriesCopyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EntriesCopyResponse, error) {
	rsp, err := c.EntriesCopyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEntriesCopyResponse(rsp)
}

func (c *ClientWithResponses) EntriesCopyWithResponse(ctx context.Context, body EntriesCopyJSONRequestBody, reqEditors ...RequestEditorFn) (*EntriesCopyResponse, error) {
	rsp, err := c.EntriesCopy(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEntriesCopyResponse(rsp)
}

// EntriesMoveWithBodyWithResponse request with arbitrary body returning *EntriesMoveResponse
func (c *ClientWithResponses) EntriesMoveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EntriesMoveResponse, error) {
	rsp, err := c.EntriesMoveWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEntriesMoveResponse(rsp)
}

func (c *ClientWithResponses) EntriesMoveWithResponse(ctx context.Context, body EntriesMoveJSONRequestBody, reqEditors ...RequestEditorFn) (*EntriesMoveResponse, error) {
	rsp, err := c.EntriesMove(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEntriesMoveResponse(rsp)
}

// EntriesRestoreWithBodyWithResponse request with arbitrary body returning *EntriesRestoreResponse
func (c *ClientWithResponses) EntriesRestoreWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EntriesRestoreResponse, error) {
	rsp, err := c.EntriesRestoreWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEntriesRestoreResponse(rsp)
}

func (c *ClientWithResponses) EntriesRestoreWithResponse(ctx context.Context, body EntriesRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*EntriesRestoreResponse, error) {
	rsp, err := c.EntriesRestore(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEntriesRestoreResponse(rsp)
}

// PostFileEntriesStarWithBodyWithResponse request with arbitrary body returning *PostFileEntriesStarResponse
func (c *ClientWithResponses) PostFileEntriesStarWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFileEntriesStarResponse, error) {
	rsp, err := c.PostFileEntriesStarWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFileEntriesStarResponse(rsp)
}

func (c *ClientWithResponses) PostFileEntriesStarWithResponse(ctx context.Context, body PostFileEntriesStarJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFileEntriesStarResponse, error) {
	rsp, err := c.PostFileEntriesStar(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFileEntriesStarResponse(rsp)
}

// PostFileEntriesUnstarWithBodyWithResponse request with arbitrary body returning *PostFileEntriesUnstarResponse
func (c *ClientWithResponses) PostFileEntriesUnstarWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFileEntriesUnstarResponse, error) {
	rsp, err := c.PostFileEntriesUnstarWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFileEntriesUnstarResponse(rsp)
}

func (c *ClientWithResponses) PostFileEntriesUnstarWithResponse(ctx context.Context, body PostFileEntriesUnstarJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFileEntriesUnstarResponse, error) {
	rsp, err := c.PostFileEntriesUnstar(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFileEntriesUnstarResponse(rsp)
}

// EntryUpdateWithBodyWithResponse request with arbitrary body returning *EntryUpdateResponse
func (c *ClientWithResponses) EntryUpdateWithBodyWithResponse(ctx context.Context, entryId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EntryUpdateResponse, error) {
	rsp, err := c.EntryUpdateWithBody(ctx, entryId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEntryUpdateResponse(rsp)
}

func (c *ClientWithResponses) EntryUpdateWithResponse(ctx context.Context, entryId int, body EntryUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*EntryUpdateResponse, error) {
	rsp, err := c.EntryUpdate(ctx, entryId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEntryUpdateResponse(rsp)
}

// PutFileEntriesEntryIdChangePermissionsWithBodyWithResponse request with arbitrary body returning *PutFileEntriesEntryIdChangePermissionsResponse
func (c *ClientWithResponses) PutFileEntriesEntryIdChangePermissionsWithBodyWithResponse(ctx context.Context, entryId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutFileEntriesEntryIdChangePermissionsResponse, error) {
	rsp, err := c.PutFileEntriesEntryIdChangePermissionsWithBody(ctx, entryId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutFileEntriesEntryIdChangePermissionsResponse(rsp)
}

func (c *ClientWithResponses) PutFileEntriesEntryIdChangePermissionsWithResponse(ctx context.Context, entryId int, body PutFileEntriesEntryIdChangePermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutFileEntriesEntryIdChangePermissionsResponse, error) {
	rsp, err := c.PutFileEntriesEntryIdChangePermissions(ctx, entryId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutFileEntriesEntryIdChangePermissionsResponse(rsp)
}

// PostFileEntriesEntryIdShareWithBodyWithResponse request with arbitrary body returning *PostFileEntriesEntryIdShareResponse
func (c *ClientWithResponses) PostFileEntriesEntryIdShareWithBodyWithResponse(ctx context.Context, entryId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFileEntriesEntryIdShareResponse, error) {
	rsp, err := c.PostFileEntriesEntryIdShareWithBody(ctx, entryId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFileEntriesEntryIdShareResponse(rsp)
}

func (c *ClientWithResponses) PostFileEntriesEntryIdShareWithResponse(ctx context.Context, entryId int, body PostFileEntriesEntryIdShareJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFileEntriesEntryIdShareResponse, error) {
	rsp, err := c.PostFileEntriesEntryIdShare(ctx, entryId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFileEntriesEntryIdShareResponse(rsp)
}

// GetShareableLinkWithResponse request returning *GetShareableLinkResponse
func (c *ClientWithResponses) GetShareableLinkWithResponse(ctx context.Context, entryId int64, reqEditors ...RequestEditorFn) (*GetShareableLinkResponse, error) {
	rsp, err := c.GetShareableLink(ctx, entryId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetShareableLinkResponse(rsp)
}

// CreateShareableLinkWithBodyWithResponse request with arbitrary body returning *CreateShareableLinkResponse
func (c *ClientWithResponses) CreateShareableLinkWithBodyWithResponse(ctx context.Context, entryId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateShareableLinkResponse, error) {
	rsp, err := c.CreateShareableLinkWithBody(ctx, entryId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateShareableLinkResponse(rsp)
}

func (c *ClientWithResponses) CreateShareableLinkWithResponse(ctx context.Context, entryId int64, body CreateShareableLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateShareableLinkResponse, error) {
	rsp, err := c.CreateShareableLink(ctx, entryId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateShareableLinkResponse(rsp)
}

// DeleteFileEntriesEntryIdUnshareWithBodyWithResponse request with arbitrary body returning *DeleteFileEntriesEntryIdUnshareResponse
func (c *ClientWithResponses) DeleteFileEntriesEntryIdUnshareWithBodyWithResponse(ctx context.Context, entryId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteFileEntriesEntryIdUnshareResponse, error) {
	rsp, err := c.DeleteFileEntriesEntryIdUnshareWithBody(ctx, entryId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFileEntriesEntryIdUnshareResponse(rsp)
}

func (c *ClientWithResponses) DeleteFileEntriesEntryIdUnshareWithResponse(ctx context.Context, entryId int, body DeleteFileEntriesEntryIdUnshareJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteFileEntriesEntryIdUnshareResponse, error) {
	rsp, err := c.DeleteFileEntriesEntryIdUnshare(ctx, entryId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFileEntriesEntryIdUnshareResponse(rsp)
}

// DeleteShareableLinkWithResponse request returning *DeleteShareableLinkResponse
func (c *ClientWithResponses) DeleteShareableLinkWithResponse(ctx context.Context, entryId int64, reqEditors ...RequestEditorFn) (*DeleteShareableLinkResponse, error) {
	rsp, err := c.DeleteShareableLink(ctx, entryId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteShareableLinkResponse(rsp)
}

// UpdateShareableLinkWithBodyWithResponse request with arbitrary body returning *UpdateShareableLinkResponse
func (c *ClientWithResponses) UpdateShareableLinkWithBodyWithResponse(ctx context.Context, entryId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateShareableLinkResponse, error) {
	rsp, err := c.UpdateShareableLinkWithBody(ctx, entryId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateShareableLinkResponse(rsp)
}

func (c *ClientWithResponses) UpdateShareableLinkWithResponse(ctx context.Context, entryId int64, body UpdateShareableLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateShareableLinkResponse, error) {
	rsp, err := c.UpdateShareableLink(ctx, entryId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateShareableLinkResponse(rsp)
}

// CreateFolderWithBodyWithResponse request with arbitrary body returning *CreateFolderResponse
func (c *ClientWithResponses) CreateFolderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFolderResponse, error) {
	rsp, err := c.CreateFolderWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFolderResponse(rsp)
}

func (c *ClientWithResponses) CreateFolderWithResponse(ctx context.Context, body CreateFolderJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFolderResponse, error) {
	rsp, err := c.CreateFolder(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFolderResponse(rsp)
}

// UploadWithBodyWithResponse request with arbitrary body returning *UploadResponse
func (c *ClientWithResponses) UploadWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadResponse, error) {
	rsp, err := c.UploadWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUploadResponse(rsp)
}

// ParseLoginResponse parses an HTTP response from a LoginWithResponse call
func ParseLoginResponse(rsp *http.Response) (*LoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Status *string `json:"status,omitempty"`
			User   *User   `json:"user,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseRegisterResponse parses an HTTP response from a RegisterWithResponse call
func ParseRegisterResponse(rsp *http.Response) (*RegisterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RegisterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Status *string `json:"status,omitempty"`
			User   *User   `json:"user,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseIndexEntryResponse parses an HTTP response from a IndexEntryWithResponse call
func ParseIndexEntryResponse(rsp *http.Response) (*IndexEntryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IndexEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []FileEntry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEntriesDeleteResponse parses an HTTP response from a EntriesDeleteWithResponse call
func ParseEntriesDeleteResponse(rsp *http.Response) (*EntriesDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EntriesDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Status *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseEntriesCopyResponse parses an HTTP response from a EntriesCopyWithResponse call
func ParseEntriesCopyResponse(rsp *http.Response) (*EntriesCopyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EntriesCopyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Entries *[]FileEntry `json:"entries,omitempty"`
			Status  *string      `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseEntriesMoveResponse parses an HTTP response from a EntriesMoveWithResponse call
func ParseEntriesMoveResponse(rsp *http.Response) (*EntriesMoveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EntriesMoveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Entries *[]FileEntry `json:"entries,omitempty"`
			Status  *string      `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseEntriesRestoreResponse parses an HTTP response from a EntriesRestoreWithResponse call
func ParseEntriesRestoreResponse(rsp *http.Response) (*EntriesRestoreResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EntriesRestoreResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Status *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePostFileEntriesStarResponse parses an HTTP response from a PostFileEntriesStarWithResponse call
func ParsePostFileEntriesStarResponse(rsp *http.Response) (*PostFileEntriesStarResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostFileEntriesStarResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Status *string `json:"status,omitempty"`
			Tag    *Tag    `json:"tag,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePostFileEntriesUnstarResponse parses an HTTP response from a PostFileEntriesUnstarWithResponse call
func ParsePostFileEntriesUnstarResponse(rsp *http.Response) (*PostFileEntriesUnstarResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostFileEntriesUnstarResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Status *string `json:"status,omitempty"`
			Tag    *Tag    `json:"tag,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseEntryUpdateResponse parses an HTTP response from a EntryUpdateWithResponse call
func ParseEntryUpdateResponse(rsp *http.Response) (*EntryUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EntryUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			FileEntry *FileEntry `json:"fileEntry,omitempty"`
			Status    *string    `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePutFileEntriesEntryIdChangePermissionsResponse parses an HTTP response from a PutFileEntriesEntryIdChangePermissionsWithResponse call
func ParsePutFileEntriesEntryIdChangePermissionsResponse(rsp *http.Response) (*PutFileEntriesEntryIdChangePermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutFileEntriesEntryIdChangePermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Status *string `json:"status,omitempty"`
			Users  *[]User `json:"users,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePostFileEntriesEntryIdShareResponse parses an HTTP response from a PostFileEntriesEntryIdShareWithResponse call
func ParsePostFileEntriesEntryIdShareResponse(rsp *http.Response) (*PostFileEntriesEntryIdShareResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostFileEntriesEntryIdShareResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Status *string `json:"status,omitempty"`
			Users  *[]User `json:"users,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetShareableLinkResponse parses an HTTP response from a GetShareableLinkWithResponse call
func ParseGetShareableLinkResponse(rsp *http.Response) (*GetShareableLinkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetShareableLinkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShareableLinkResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseCreateShareableLinkResponse parses an HTTP response from a CreateShareableLinkWithResponse call
func ParseCreateShareableLinkResponse(rsp *http.Response) (*CreateShareableLinkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateShareableLinkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Link   *ShareableLink `json:"link,omitempty"`
			Status *string        `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteFileEntriesEntryIdUnshareResponse parses an HTTP response from a DeleteFileEntriesEntryIdUnshareWithResponse call
func ParseDeleteFileEntriesEntryIdUnshareResponse(rsp *http.Response) (*DeleteFileEntriesEntryIdUnshareResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFileEntriesEntryIdUnshareResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Status *string `json:"status,omitempty"`
			Users  *[]User `json:"users,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteShareableLinkResponse parses an HTTP response from a DeleteShareableLinkWithResponse call
func ParseDeleteShareableLinkResponse(rsp *http.Response) (*DeleteShareableLinkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteShareableLinkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Status *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseUpdateShareableLinkResponse parses an HTTP response from a UpdateShareableLinkWithResponse call
func ParseUpdateShareableLinkResponse(rsp *http.Response) (*UpdateShareableLinkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateShareableLinkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Link   *ShareableLink `json:"link,omitempty"`
			Status *string        `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseCreateFolderResponse parses an HTTP response from a CreateFolderWithResponse call
func ParseCreateFolderResponse(rsp *http.Response) (*CreateFolderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateFolderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Folder *FileEntry `json:"folder,omitempty"`
			Status *string    `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseUploadResponse parses an HTTP response from a UploadWithResponse call
func ParseUploadResponse(rsp *http.Response) (*UploadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UploadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			FileEntry *FileEntry `json:"fileEntry,omitempty"`
			Status    *string    `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}
